#!/usr/bin/env python
import sys
from os.path import dirname
bindir = dirname(__file__)
libdir = bindir + "/../lib/"
sys.path.append(libdir)
sys.path.append(bindir)
from freebase.api import HTTPMetawebSession, MetawebError
from convert_logs import Event, create_event_xml
import iso8601
from sys import argv, stderr, stdout
import logging
from logging import debug, warning, error
from simplejson import loads
null = None

logging.basicConfig(level=logging.ERROR,
                    format='%(levelname)s: %(message)s')

def domain_query(domain):
    return {
        "type" : [
          {
            "!/type/domain/types" : domain,
            "id" : null
          }
        ],
        "guid": null
      }

if len(argv) == 2:
    if argv[1][0] != '/':
        sub_query = domain_query(argv[1])
    else:
        print argv[1]
        print loads(argv[1])
        exit
        sub_query = loads(argv[1])
else:
    sub_query = domain_query("/base/tallships")

mss = HTTPMetawebSession('www.freebase.com')


user_cache = {}
def user_from_guid(guid):
    global user_cache, mss
    if guid not in user_cache:
        user = mss.mqlread({
          "a:id" : "/guid/%s" % guid,
          "id" : None
        })
        user_cache[guid] = user["id"][6:]
    return user_cache[guid]


query = {
  "creator" : null,
  "sort" : "timestamp",
  "target" : sub_query,
  "timestamp" : null,
  "type" : "/type/link"
}


def freebase_events(query):
    for edit in mss.mqlreaditer(query):
        #munge munge munge
        name = ":".join(map(lambda t: t["id"], edit["target"]["type"]) + [edit["target"]["guid"]])
        date = int(iso8601.parse_date(edit["timestamp"]).strftime("%s")) * 1000
        author = edit["creator"][6:]
        yield Event(name, date, author)

print query
# create_event_xml(freebase_events(query), stdout)